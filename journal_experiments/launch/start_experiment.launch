<launch>
<arg name="sim" default="true" />
<arg name="fake_sensor_frame" default="true" />
<arg name="ur_prefix" default="UR10_l" />
<arg name="tf_prefix" default="mur620c" />

<group if="$(arg sim)">
    <rosparam subst_value="true">
        mur620c/move_to_start_pose/mir_cmd_vel_topic: "/mur620c/mobile_base_controller/cmd_vel"
        move_ur_to_start_pose/ur_command_topic: "/mur620c/$(arg ur_prefix)/twist_controller/command_safe"
        move_ur_to_start_pose/ur_pose_topic: "/mur620c/$(arg ur_prefix)/ur_calibrated_pose"
        move_ur_to_start_pose/ur_base_link_frame_id: "mur620c/$(arg ur_prefix)/base_link"

        move_ur_to_start_pose/ur_target_tolerance_trans: 0.1
        move_ur_to_start_pose/ur_target_tolerance_rot: 0.5

        move_ur_to_start_pose/Kpx: 0.5
        move_ur_to_start_pose/Kpy: 0.5
        move_ur_to_start_pose/Kpz: 0.5
        move_ur_to_start_pose/Kp_phi: 0.1

        control_ur/mir_cmd_vel_topic: "/mur620c/mobile_base_controller/cmd_vel"
        control_ur/ur_command_topic: "/mur620c/$(arg ur_prefix)/twist_controller/command_safe"
        control_ur/mir_pose_topic : /mur620c/mir_pose_simple
        control_ur/ur_pose_topic: "/mur620c/$(arg ur_prefix)/ur_calibrated_pose"
        control_ur/ur_base_link_frame_id: "mur620c/$(arg ur_prefix)/base_link"
        control_ur/ur_prefix: "$(arg ur_prefix)"

        control_mir/mir_cmd_vel_topic_relative: "mobile_base_controller/cmd_vel"

        calibrated_pose_fake/namespace: "mur620c/$(arg ur_prefix)/"
    </rosparam>
    <node name="calibrated_pose_fake" pkg="journal_experiments" type="calibrated_pose_fake.py" output="screen" />

    
</group>

<group unless="$(arg sim)">
    <rosparam param="/state_machine/robot_names" subst_value="True">["$(arg tf_prefix)"]</rosparam>
    <rosparam subst_value="true">
        mur620c/move_to_start_pose/mir_cmd_vel_topic: "/$(arg tf_prefix)/cmd_vel"
        move_ur_to_start_pose/ur_command_topic: "/$(arg tf_prefix)/$(arg ur_prefix)/twist_controller/command_safe"
        move_ur_to_start_pose/ur_pose_topic: "/$(arg tf_prefix)/$(arg ur_prefix)/ur_calibrated_pose"
        move_ur_to_start_pose/ur_base_link_frame_id: "$(arg tf_prefix)/$(arg ur_prefix)/base"

        move_ur_to_start_pose/ur_target_tolerance_trans: 0.1
        move_ur_to_start_pose/ur_target_tolerance_rot: 0.5

        move_ur_to_start_pose/Kpx: 0.5
        move_ur_to_start_pose/Kpy: 0.5
        move_ur_to_start_pose/Kpz: 0.5
        move_ur_to_start_pose/Kp_phi: 0.1

        control_ur/mir_cmd_vel_topic: "/$(arg tf_prefix)/cmd_vel"
        control_ur/ur_command_topic: "/$(arg tf_prefix)/$(arg ur_prefix)/twist_controller/command_safe"
        control_ur/mir_pose_topic : /$(arg tf_prefix)/mir_pose_simple
        control_ur/ur_pose_topic: "/$(arg tf_prefix)/$(arg ur_prefix)/ur_calibrated_pose"
        control_ur/ur_base_link_frame_id: "$(arg tf_prefix)/$(arg ur_prefix)/base_ideal"
        control_ur/ur_prefix: "$(arg ur_prefix)"

        control_mir/mir_cmd_vel_topic_relative: "cmd_vel"
    </rosparam>
</group>

<node pkg="tf2_ros" type="static_transform_publisher" name="sensor_transform" args="0 0 0 0 0 0 $(arg tf_prefix)/$(arg ur_prefix)/tool0 sensor_frame" output="screen" if="$(arg fake_sensor_frame)"/>


<!-- start the state machine -->
<node pkg="journal_experiments" type="state_machine.py" name="state_machine" output="screen">
    <rosparam subst_value="true">
        ur_prefixes: ["$(arg ur_prefix)"]
    </rosparam>
</node>



</launch>